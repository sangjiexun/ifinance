■株価予測プログラム
- Maven
http://www.techscore.com/tech/Java/ApacheJakarta/Maven/index/

- Javaでスクレイピング
http://jsoup.org/
http://mvnrepository.com/artifact/org.jsoup/jsoup/1.7.2

- Yahoo! Finance
-- 時価総額、デイリー、Page=1
http://info.finance.yahoo.co.jp/ranking/?kd=4&tm=d&vl=a&mk=1&p=1

-- 設立年月日
http://info.finance.yahoo.co.jp/ranking/?kd=40&tm=d&vl=a&mk=1&p=1

-- 売上年月日
http://info.finance.yahoo.co.jp/ranking/?kd=46&tm=d&vl=a&mk=1&p=1

時価総額, kd=4
設立年月日, kd=40
売上高, kd=46

■JoinedStockPrice sql
select 
cp.stock_id, 
cp.sales_amount, 
cp.operating_profit, 
cp.ordinary_profit, 
cp.net_profit, 
cp.total_assets, 
cp.debt_with_interest,
cp.capital_fund, 
cp.owned_capital, 
dsp.market_cap 
from corporate_performance
as cp join daily_stock_price as dsp on cp.stock_id = dsp.stock_id;

# header
stock_id,sales_amount,operating_profit,ordinary_profit,net_profit,total_assets,debt_with_interest,capital_fund,owned_capital,market_cap 


- JavaでSQLite
https://bitbucket.org/xerial/sqlite-jdbc

■ R program
>>read data
d = read.csv("corp_data.csv", header=T)

>>make train data
d.tr = d[c(1:2500),]

>>make test data
d.te = d[-c(1:2500),]

>>linear regression
d.lm = lm(market_cap ~ sales_amount + ordinary_profit + operating_profit + net_profit + total_assets + capital_fund + debt_with_interest, data=d.tr)

>>RMSE
sqrt(sum((predict(d.lm, d.te) - d.te$market_cap)^2))

>> glmnet
d.glmnet = glmnet(cbind(d$sales_amount, d$ordinary_profit), d$market_cap)
predict(d.glmnet, cbind(d$sales_amount, d$ordinary_profit), s=0.01)

* split learning
-- 売上高で4分割してそれぞれで学習
--- データ分割
d.1 = d[d$sales_amount >= quantile(d$sales_amount)[1] & d$sales_amount < quantile(d$sales_amount)[2],]
d.2 = d[d$sales_amount >= quantile(d$sales_amount)[2] & d$sales_amount < quantile(d$sales_amount)[3],]
d.3 = d[d$sales_amount >= quantile(d$sales_amount)[3] & d$sales_amount < quantile(d$sales_amount)[4],]
d.4 = d[d$sales_amount >= quantile(d$sales_amount)[4] & d$sales_amount < quantile(d$sales_amount)[5],]

--- plot
plot(d.1$market_cap, predict(lm(market_cap ~ ., data=d.1[, -1])))
plot(d.2$market_cap, predict(lm(market_cap ~ ., data=d.2[, -1])))
plot(d.3$market_cap, predict(lm(market_cap ~ ., data=d.3[, -1])))
plot(d.4$market_cap, predict(lm(market_cap ~ ., data=d.4[, -1])))

--- RMSE(SPLIT)
sqrt(ave((predict(lm(market_cap ~ ., data=d.1[,-1]), d.1[,-1]) - d.1$market_cap)^2)[1])
sqrt(ave((predict(lm(market_cap ~ ., data=d.2[,-1]), d.2[,-1]) - d.2$market_cap)^2)[1])
sqrt(ave((predict(lm(market_cap ~ ., data=d.3[,-1]), d.3[,-1]) - d.3$market_cap)^2)[1])
sqrt(ave((predict(lm(market_cap ~ ., data=d.4[,-1]), d.4[,-1]) - d.4$market_cap)^2)[1])

--- RMSE(ALL)
sqrt(ave((predict(lm(market_cap ~ ., data=d[,-1]), d.1[,-1]) - d.1$market_cap)^2)[1])
sqrt(ave((predict(lm(market_cap ~ ., data=d[,-1]), d.2[,-1]) - d.2$market_cap)^2)[1])
sqrt(ave((predict(lm(market_cap ~ ., data=d[,-1]), d.3[,-1]) - d.3$market_cap)^2)[1])
sqrt(ave((predict(lm(market_cap ~ ., data=d[,-1]), d.4[,-1]) - d.4$market_cap)^2)[1])

--- RMSE(SPLIT)
cor(predict(lm(market_cap ~ ., data=d.1[,-1]), d.1[,-1]), d.1$market_cap)
cor(predict(lm(market_cap ~ ., data=d.2[,-1]), d.2[,-1]), d.2$market_cap)
cor(predict(lm(market_cap ~ ., data=d.3[,-1]), d.3[,-1]), d.3$market_cap)
cor(predict(lm(market_cap ~ ., data=d.4[,-1]), d.4[,-1]), d.4$market_cap)

--- RMSE(ALL)
cor(predict(lm(market_cap ~ ., data=d[,-1]), d.1[,-1]), d.1$market_cap)
cor(predict(lm(market_cap ~ ., data=d[,-1]), d.2[,-1]), d.2$market_cap)
cor(predict(lm(market_cap ~ ., data=d[,-1]), d.3[,-1]), d.3$market_cap)
cor(predict(lm(market_cap ~ ., data=d[,-1]), d.4[,-1]), d.4$market_cap)

* Stock Index Filtering
-- calc stock index
i_psr = d$sales_amount / d$market_cap
i_per = d$net_profit / d$market_cap
i_pbr = d$total_assets / d$market_cap

-- filter
d.fil = d[which(i_psr > quantile(i_psr)[4] & i_per > quantile(i_per)[4] & i_pbr > quantile(i_pbr)[4] & d$operating_profit > 0 & d$ordinary_profit > 0 & d$sales_amount > quantile(d$sales_amount)[2]),]

-- cor
cor(predict(lm(market_cap ~ ., data = d[,-1]), d.fil[,-1]), d.fil$market_cap)

-- calc lift ratio
lift.ratio = predict(lm(market_cap ~ ., data = d[,-1]), d.fil[,-1]) / d.fil$market_cap

■ SQL to select latest stock info
-- daily_stock_price
select * from daily_stock_price as dsp join (
  select stock_id, max(o_date) as max_date 
  from daily_stock_price group by stock_id
) as dates
on dsp.stock_id = dates.stock_id and dsp.o_date = dates.max_date;

-- corporate_performance
SELECT cp.stock_id, cp.settling_year, cp.settling_month, 
  cp.sales_amount, cp.operating_profit, cp.ordinary_profit, 
  cp.net_profit, cp.total_assets, cp.debt_with_interest 
FROM corporate_performance AS cp JOIN (
  SELECT stock_id, MAX(settling_year) AS settling_year
  FROM corporate_performance GROUP BY stock_id
) AS years
ON cp.stock_id = years.stock_id AND cp.settling_year = years.settling_year;

■どういう銘柄をどういう風にレポートしてほしいかを考える
- 割安銘柄ランキング(UndervaluedStockRankingReport)
-- 割安とは？
ratio = p_marketCap / marketCap > 2.0
ratio のランキングをレポート
売上高が下位1stQuantileに入らない
per, psr, pbrが上位1stQuantileに入る
  StockIndexStats.class: コンストラクタでJoinedStockInfoのMapを受け取る。各種指標の統計情報を扱うクラス。フィルタもここに作成。
  common.Summary.class: double[] を引数にしたコンストラクタを持ち、統計情報を持つクラス

- 株価値下がり・値上がりランキング
売上がそこそこある銘柄限定（フィルタ通るやつとかでもいいかも）
Daily, Weekly, Monthly, Yearlyで値下がり・値上がりを計算
=> Monthlyくらいで大幅に上がったり・下がったりしてる銘柄について何が原因だったか調べて、予測に使ったり、レポートする項目に増やしたり決定する。

- 予測株価の急上昇をチェック

- 予測結果レポート
X日前に割安と判定した銘柄の株価が、X日でどれだけ上がったかをレポートする
全体で時価総額がどれだけ上昇したかもレポートしよう
